import { type NextPage } from "next";
import { signIn, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { trpc } from "../utils/trpc";
import {colors as customColors} from '../styles/theme';
import tailwindColors from 'tailwindcss/colors';

const Home: NextPage = () => {
	const session = useSession();
	
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

			<nav className="absolute top-0 left-0 min-w-full h-fit p-4 text-center font-body z-10">
				<Link href='/'>
					<h1 className="text-2xl font-heading font-bold mr-5">
						<svg className="inline" width="24px" height="24px" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
							<g id="Bookmark_Plus" data-name="Bookmark Plus">
								<path stroke="black" strokeWidth="1" d="M17.6,21.938a1.482,1.482,0,0,1-1.011-.4l-4.251-3.9a.5.5,0,0,0-.678,0L7.41,21.538a1.5,1.5,0,0,1-2.517-1.1V4.563a2.5,2.5,0,0,1,2.5-2.5h9.214a2.5,2.5,0,0,1,2.5,2.5V20.435a1.483,1.483,0,0,1-.9,1.375A1.526,1.526,0,0,1,17.6,21.938ZM12,16.5a1.5,1.5,0,0,1,1.018.395L17.269,20.8a.5.5,0,0,0,.838-.368V4.563a1.5,1.5,0,0,0-1.5-1.5H7.393a1.5,1.5,0,0,0-1.5,1.5V20.435a.5.5,0,0,0,.839.368L10.983,16.9A1.5,1.5,0,0,1,12,16.5Z"/>
								<path stroke="black" strokeWidth="1" d="M14,10.28H12.5v1.5a.5.5,0,0,1-1,0v-1.5H10a.5.5,0,0,1,0-1h1.5V7.78a.5.5,0,0,1,1,0v1.5H14A.5.5,0,0,1,14,10.28Z"/>
							</g>
						</svg>
						eventrrr
					</h1>
				</Link>
			</nav>

			<main className="bg-tan-50 font-body">
				<div className="relative px-6 lg:px-8">
					{
						session.status === 'loading' ? (
							<></>
						) : session.status === 'unauthenticated' ? (
							<LandingPage />
						) : (
							<Dashboard />
						)
					}
				</div>
			</main>
    </>
  );
};

export default Home;

const COLOR_CONF: {frog: [string, string]} & Record<string, [string, string]> = {
	frog: ['frog-50', 'frog-200'],
	'rich-blue': ['rich-blue-50', 'rich-blue-200'],
	rose: ['rose-400', 'rose-500']
}

const Dashboard = () => {
	const {data} = useSession();
	const {data: events} = trpc.auth.getUserEvents.useQuery();

	return (
		<div className="mx-auto max-w-screen-xl w-full min-h-screen pt-24">
			<div className="flex flex-col min-h-full">
				<h1 className="text-4xl sm:text-5xl font-bold font-heading mb-5">Hi {data?.user?.name}!</h1>
				<h2 className="text-3xl">Your Events:</h2>
				<ul className="flex flex-col gap-3 mt-2">
					{
						events &&
						events.map((ev, evIdx) => {
							const [fromCol, toCol] = COLOR_CONF[ev.color] || COLOR_CONF.frog;
							const userLocale =
								navigator.languages && navigator.languages.length
									? navigator.languages[0]
									: navigator.language;
							const guests = (ev.guests === '' && []) || ev.guests.split(',');

							const fromColCol = fromCol.slice(0, fromCol.lastIndexOf('-'));
							const fromColMod = fromCol.slice(fromCol.lastIndexOf('-') + 1);

							const toColCol = toCol.slice(0, toCol.lastIndexOf('-'));
							const toColMod = toCol.slice(toCol.lastIndexOf('-') + 1);

							type ColRecord = any;

							return (
								<li key={evIdx}>
									<div
										className='p-3 max-w-lg bg-gradient-to-br from-frog-200 to-frog-400 text-white'
										style={{
											'--tw-gradient-from': 
												(tailwindColors as ColRecord)[fromColCol][fromColMod] || 
												(customColors as ColRecord)[fromColCol][fromColMod] || 'transparent',
											'--tw-gradient-to':
												(tailwindColors as ColRecord)[toColCol][toColMod] ||
												(customColors as ColRecord)[toColCol][toColMod] || 'transparent',
										} as React.CSSProperties}>
										<Link href={`/events/${ev.id}`}>
											<h3 className="font-bold text-lg">
												<div className="inline-block w-[0.9rem] mr-2">
													<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlnsXlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
														viewBox="0 0 195.085 195.085" xmlSpace="preserve">
														<path fill='currentColor' d="M179.617,15.453c-0.051-0.05-0.102-0.1-0.154-0.149c-18.689-18.549-48.477-20.463-69.37-4.441
															c-2.091,1.599-3.776,3.053-5.302,4.575c-0.044,0.044-0.087,0.088-0.13,0.133L71.224,49.012c-2.929,2.929-2.929,7.678,0.001,10.606
															c2.93,2.93,7.679,2.929,10.606-0.001l33.561-33.566c0.035-0.035,0.069-0.07,0.104-0.105c1.023-1.01,2.205-2.02,3.715-3.174
															c15.008-11.508,36.411-10.098,49.789,3.281c0.044,0.044,0.089,0.088,0.134,0.131c14.652,14.786,14.611,38.742-0.124,53.483
															l-33.559,33.563c-2.929,2.929-2.929,7.678,0.001,10.606c1.465,1.464,3.384,2.196,5.303,2.196c1.919,0,3.839-0.732,5.304-2.197
															l33.56-33.563C200.241,69.641,200.241,36.077,179.617,15.453z"/>
														<path fill='currentColor' d="M113.23,135.437l-33.541,33.542c-0.066,0.067-0.132,0.136-0.196,0.205c-3.708,3.648-8.059,6.449-12.945,8.333
															c-13.995,5.418-29.888,2.07-40.481-8.524c-14.768-14.784-14.768-38.84,0-53.619L59.624,81.83c1.406-1.407,2.197-3.315,2.197-5.305
															v-0.013c0-4.143-3.357-7.494-7.5-7.494c-2.135,0-4.062,0.895-5.428,2.328l-33.435,33.422c-20.61,20.628-20.612,54.195-0.002,74.828
															c10.095,10.097,23.628,15.479,37.411,15.479c6.414-0.001,12.884-1.167,19.084-3.566c6.922-2.667,13.088-6.67,18.326-11.896
															c0.076-0.075,0.15-0.153,0.223-0.232l33.337-33.337c2.929-2.93,2.929-7.678-0.001-10.607
															C120.909,132.509,116.16,132.509,113.23,135.437z"/>
														<path fill='currentColor' d="M59.15,135.908c1.465,1.465,3.384,2.197,5.304,2.197c1.919,0,3.839-0.732,5.303-2.196l66.164-66.161
															c2.93-2.929,2.93-7.678,0.001-10.606c-2.929-2.93-7.678-2.929-10.606-0.001l-66.164,66.161
															C56.221,128.23,56.221,132.979,59.15,135.908z"/>
													</svg>
												</div>
												{ev.title}
											</h3>
										</Link>
										<p>{ev.description}</p>
										<div className="grid grid-cols-2 mt-1 text-sm">
											<span className="font-semibold">
												{guests.length} {guests.length === 1 ? 'guest' : 'guests'}
											</span>
											<span className="text-right italic">
												{ev.date.toLocaleDateString(userLocale)}
											</span>
										</div>
									</div>
								</li>
							)
						})
					}
				</ul>
			</div>
		</div>
	);
};

const LandingPage = () => {
	return (
		<div className="mx-auto max-w-3xl min-h-screen flex items-center">
			<div>
				<div className="hidden sm:mb-8 sm:flex sm:justify-center">
					<div className="relative overflow-hidden rounded-full py-1.5 px-4 text-sm leading-6 ring-1 ring-gray-900/10 hover:ring-gray-900/20">
						<span className="text-gray-600">
							Celebrating New Year&apos;s?
							<a href="#" className="font-semibold text-frog-400 ml-2">
								Organise an event <span aria-hidden="true">&rarr;</span>
							</a>
						</span>
					</div>
				</div>
				<div>
					<h1 className="text-4xl font-black tracking-tight sm:text-center sm:text-6xl font-heading">
						Quickly plan out events
					</h1>
					<p className="mt-6 text-lg leading-8 text-gray-600 sm:text-center">
					Streamline your event planning with our easy-to-use RSVP platform. Manage guest lists, send reminders,
					and track attendance all in one place. Try it out now!
					</p>
					<div className="mt-8 flex gap-x-4 sm:justify-center">
						<button
							className='rounded-lg bg-frog-200 px-4 py-1.5 text-base font-semibold leading-7 text-white shadow-sm hover:bg-frog-400'
							onClick={() => signIn()}>
							Get started
							<span className="text-indigo-200" aria-hidden="true">&rarr;</span>
						</button>
					</div>
				</div>
			</div>
		</div>
	);
};